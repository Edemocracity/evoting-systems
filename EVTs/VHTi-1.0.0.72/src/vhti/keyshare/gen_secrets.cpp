/*  */
/* This material is subject to the VoteHere Source Code Evaluation */
/* License Agreement ("Agreement").  Possession and/or use of this */
/* material indicates your acceptance of this Agreement in its entirety. */
/* Copies of the Agreement may be found at www.votehere.net. */
/*  */
/* Copyright 2004 VoteHere, Inc.  All Rights Reserved */
/*  */
/* You may not download this Software if you are located in any country */
/* (or are a national of a country) subject to a general U.S. or */
/* U.N. embargo or are deemed to be a terrorist country (i.e., Cuba, */
/* Iran, Iraq, Libya, North Korea, Sudan and Syria) by the United States */
/* (each a "Prohibited Country") or are otherwise denied export */
/* privileges from the United States or Canada ("Denied Person"). */
/* Further, you may not transfer or re-export the Software to any such */
/* country or Denied Person without a license or authorization from the */
/* U.S. government.  By downloading the Software, you represent and */
/* warrant that you are not a Denied Person, are not located in or a */
/* national of a Prohibited Country, and will not export or re-export to */
/* any Prohibited Country or Denied Party. */
// Copyright 2003 VoteHere Inc. All Rights Reserved.

#include "vhti/gen_secrets.h"
#include "vhti/keyshare_util.h"
#include <support/internal_error.h>
#include <support/support_internal.h>
#include <support/bignum.h>
#include <support/xml_tree_group_check.h>
#include <keyshare/keyshare_internal.h>
#include <misc/xml_tree.h>

#include <string>
#include <sstream>

// Each authority calls this function n times, passing in
// each of the authority_ids in turn, including their own,
// and their own secret_coefficients.  Thus, n sets of
// pairwise_secrets are generated by each authority.

int
VHTI_generate_secret (KeyGenParameters key_gen_parameters,
                      Authority authority,
                      SecretCoefficients secret_coefficients,
                      PairwiseSecret *pairwise_secret)
                      
{
   // Assume success until told otherwise
   int result = 0;
   *pairwise_secret = NULL;
   // The Election Modulus
   auto_BN pm(NULL);
   // The Election Subgroup Modulus
   auto_BN qm(NULL);
   // The Election Subgroup Generator
   auto_BN gen(NULL);
   // The Election Public Key
   auto_BN ePublicKey(NULL);
   // The number of authorities
   int na = 0;
   // The threshold number of authorities needed for tabulation
   int th = 0;
   // An OpenSSL structure that holds BIGNUM temporary variables
   // used by library functions
   auto_BN_CTX ctx(BN_CTX_new());
   
   try
   {
      VH_nonzero (ctx, BN_CTX_NEW);
      result = (::VHTI_validate(KEY_GEN_PARAMETERS, key_gen_parameters)
         || ::VHTI_validate(AUTHORITY, authority)
         || ::VHTI_validate(SECRET_COEFFICIENTS, secret_coefficients));

      if (result != 0) throw VH_exception("VALIDATION_FAILURE");
      
      VHUtil::xml_tree xml_ps("<" PAIRWISE_SECRET "/>");

      VHInternal::get_keygen_parameters (key_gen_parameters, pm, qm, gen,
         na, th);
      
      // An xml tree from the authority input
      VHUtil::xml_tree_group_check xml_auth(authority, pm, qm, gen, ePublicKey);

      // The id of the receiver of the secret
      const std::string to_id = xml_auth.root ()->attribute(AUTH_FINGERPRINT);

      // An xml tree from the secret_coefficients input
      VHUtil::xml_tree_group_check xml_sc(secret_coefficients, pm, qm, gen, ePublicKey);

      // Form a polynomial with the secret coefficients, pay
      // attention to the Order attribute.
      // Use the beta in the authority_id object as the variable
      // in the polynomial and generate a value.
      // Resolve the value in ElectionModulus.

      // A vector to hold the polynomial values
      std::vector< auto_BN > tht_beta;
      for (int i=0; i<xml_sc.root ()->element_count(); i++)
      {
         auto_BN orderBN ;  // The order as a BIGNUM
         VHUtil::xml_node current_small_theta = xml_sc.root ()->e(i);

         VH_nonzero (BN_set_word(orderBN,
                                 VHInternal::int_from_attribute (current_small_theta, ORDER)),
                     BN_SET_WORD);
            
         // Raise beta to the order
         auto_BN tmp_exp;
         VH_nonzero (BN_mod_exp(tmp_exp,
                                xml2BN(xml_auth.root ()->e(AUTHORITY_EVALUATION_POINT)),
                                orderBN,
                                qm,
                                ctx),
                     BN_MOD_EXP);
         // Multiply by the coefficient
         auto_BN tmp_mul;
         VH_nonzero (BN_mod_mul(tmp_mul,
                                // The value of small theta
                                xml2BN(current_small_theta),
                                tmp_exp, qm, ctx),
                     BN_MOD_MUL);
         tht_beta.push_back(tmp_mul);
      }
         
      // Make sure the number of secret coefficients = Threshold.
      VH_nonzero (tht_beta.size () == th, WRONG_NUMBER_LITTLE_THETAS);

      // add(theta0, theta1*Beta, ... , thetaThreshold*(Beta^Threshold-1))
      // To get the secret
      auto_BN secret_val;
      BN_zero(secret_val);
      for (int iv=0; iv<tht_beta.size(); iv++)
      {
         VH_nonzero (BN_add(secret_val, secret_val, tht_beta[iv]), BN_ADD);
         secret_val.Canonicalize(qm);
      }
         
      // Package the results in a vector with (FromID, ToID, Secret),
      // where FromID can be found as the AuthID attribute of the
      // secret_coefficients.
      add_BN_characters(xml_ps.root (), secret_val, DEC);
      xml_ps.root ()->add_attribute(FROM_ID, xml_sc.root ()->attribute(AUTH_FINGERPRINT));
      xml_ps.root ()->add_attribute(TO_ID, to_id);

      *pairwise_secret = VHTI_dup(xml_ps.str().c_str());
   }
   catch (const VHUtil::Exception & e)
   {
      VHTI_set_last_error(e);
      result = e.getResultNo();
   }
   
   return result;
}
