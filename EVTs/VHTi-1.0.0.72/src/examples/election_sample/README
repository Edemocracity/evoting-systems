DESCRIPTION
The election sample exercises VHTi through a series of Bash shell and Perl 
scripts. It demonstrates the VHTi protocol from election configuration 
through audit, including pre-election configuration, voting, post-election 
tabulation, and post-election audit.

Pre-election (pre-election.sh) consists of the following:
   The local election official (LEO) creates seed parameters and general 
   purpose key-pairs (to support digital signatures and encryption). The LEO 
   also creates ballot sequence numbers (BSNs) for the number of voters 
   expected to participate in the election. This is analogous to the number 
   of blank ballots typically created in a jurisdiction. The LEO also 
   creates the shared-key parameters to support the upcoming Trustee key 
   sharing protocol.

   Each Trustee creates a general-purpose key-pair (to support digital 
   signatures and encryption), a vote verification key, and data to support 
   the key-sharing protocol. Then each Trustee completes the first pass of 
   the key-sharing protocol. Each Trustee completes the second, and final, 
   pass of the key-sharing protocol. 
   
   At the end of the key-sharing procedure, the LEO generates a public-key 
   for the election where each of the Trustees has a "piece" of the private-
   key. Note that at no point does the LEO, or any Trustee, hold the entire 
   election private-key. With the election public-key defined, the LEO can 
   now generate all the blank ballots.

   Once the blank ballots are defined, each Trustee generates the vote 
   verification codebook for each blank ballot (i.e., BSN) and publicly 
   commits to it by publishing an encrypted version. After the election, all 
   the Trustees cooperate to decrypt the codebooks for any given BSN. This 
   procedure is used to ensure the codebooks have not changed by anyone or 
   anything since being generated by the Trustees. 

Voting (election.sh) consists of the following:
   The LEO loads the DRE with the blank ballot(s), DRE private-key (for 
   signing receipts), the LEO public-key (for checking blank ballot signatures), 
   and the vote verification keys (for generating codebooks for a given BSN).

   For voting, the DRE checks the blank ballot signature to ensure it hasn't 
   changed. Then, the DRE "gets" a BSN from the BSN list. Note that in an 
   actual voting application, the DRE may randomly choose a BSN or a voter may 
   choose their own BSN (e.g., a ticket from a fishbowl). 

   For a given BSN, the DRE generates a codebook. The codebook is output by 
   the DRE. The codebook contains the legend that matches verification codes 
   to candidate names. If an election observer chooses to test that the DRE 
   is faithfully representing the codebook, it can take committed codebooks to
   the Trustees for verification. This procedure was outlined above in the 
   pre-election description and below in the description of the post-election 
   audit. The sample pulls a codebook for audit about one-third of the time.

   A clear-text ballot is generated simulating the voter's choices. These 
   choices are encrypted with the election public-key and signed with the DRE 
   private-key. A receipt is then generated and shown to the voter for review. 
   This receipt contains the race and vote verification code for the chosen 
   candidate. The voter matches the verification codes on the receipt to the 
   codes on codebook for their desired candidate. If they match, the voter 
   casts the voted ballot and takes the now signed vote receipt.

   "Cheating" modes
      There are many ways to impugn the integrity of an election, either 
      purposely or by accident, which is detected by the VHTi protocol. This 
      sample illustrates two ways: (1) allowing the DRE to change the voted 
      ballot before the voter leaves the polling place and (2) by changing 
      the voted ballot after the voter leaves the polling place.

      Case (1) is the simplest, most naive, form of cheating. The DRE changes 
      the voted ballot and displays the receipt for that changed ballot in 
      the hopes the voter won't notice. In this case, the voter notices that 
      the DRE is not acting faithfully, does not cast their ballot, and 
      protests. In this case, the election results DO match the expected 
      election results because the errant DRE is caught and doesn't cast any 
      bad ballots.

      Case (2) is a more nefarious form of cheating. In this case, the DRE 
      represents the correct voted ballot. However, either in the DRE itself 
      or anytime after voting, the voted ballot is changed, lost, or destroyed. 
      The voter leaves the polling place with a correct receipt knowing that 
      their vote was faithfully recorded. However, they don't know whether 
      their vote was cast into the ballot box and counted correctly. 
      Whether their vote was cast and counted as intended must be verified by
      checking their receipt against the verification statement after the 
      election results are tabulated. In this case, the election results DO 
      NOT match the expected election results, and the problem is detected 
      during post-election audit when the vote receipts are checked.

Post-election (post-election.sh) consists of the following:
   The LEO compiles the ballot box by pulling the signed, encrypted voted 
   ballots from all DREs. After the signatures are checked on each signed 
   voted ballot, the voted ballots are compiled into a single raw, encrypted 
   ballot box. The LEO also compiles the list of blank ballot BSNs that went 
   unused. 
   
   The Trustees reveal and publish the codebook secrets for those BSNs that 
   went unused. These codebook secrets can be used to audit the codebooks, 
   which is described below under post-election audit.

   The Trustees then, in turn, shuffle the raw, encrypted ballot box to 
   remove the BSN from the voted ballots. This is important to maintain the 
   secret ballot since voters have retained vote receipts. If the encrypted 
   ballot box is decrypted (to produce clear-text ballots) without removing 
   the BSN, a voter could prove how they voted and be subject to coercion or
   vote selling. 
   
   After shuffling, the Trustees partially decrypt the ballot box using their 
   private-key share generated during pre-election. 
   
   Finally, once the Trustees complete their ballot box shuffle and partial 
   decryption, the LEO verifies the shuffling of the ballot box shuffles, 
   generates the verification statements, revealed codebooks (for unused 
   BSNs), and election results.

Post-election audit (post-election-audit.sh) consists of the following:
   The post-election audit process can be executed by anyone interested in 
   verifying the election results. To audit the election, the following 
   checks are performed on the public election data (either in the possession 
   of the voter/observer or published in election_sample/transcript
   directory):

      - Any voters or observers holding vote receipts can compare them against 
      the published verification statements.
      
      - Trustee key share commitments generated during pre-election
      configuration are checked to ensure they haven't changed.

      - The LEO signature on each signed blank ballot is checked to ensure 
      the blank ballot hasn't been altered.

      - The DRE signature on every signed voted ballot is checked to ensure 
      the voted ballots haven't been altered.

      - Each proof generated when the Trustees shuffle the encrypted ballot 
      box is checked, ensuring that the encrypted ballot box hasn't been 
      altered during the shuffling process.

      - Each proof generated when the Trustees decrypt the encrypted ballot 
      box is checked, ensuring the ballot box hasn't been altered during the 
      group decryption process. This ensures that the clear-text ballots are
      valid.

      - The election results are regenerated from the published clear-text 
      ballots and compared against the published election results published.

      - From the published Trustee data, the verification statements are 
      regenerated and compared against the published verification statements.

      - For unused BSNs, the revealed codebooks secrets are checked for 
      consistency. The codebooks are regenerated and compared against the 
      published revealed codebooks.

      - Any observers holding codebooks that were pulled from the poll-site 
      DREs for auditing can be compared against the revealed codebooks.


SYNOPSIS
_runall.sh executes the following scripts:
   pre-election.sh
   election.sh 10 
   post-election.sh
   post-election-audit.sh 
   
   If you'd like to see the XML election data dumped from running _runall.sh, 
   see the _sample_data directory. The console output can be found in 
   _sample_data/_runall.txt.

pre-election.sh [JUST_CLEAN]
   Run pre-election configuration

   JUST_CLEAN = 1 delete old election data and quit

election.sh VOTES_TO_CAST [CHEAT] [JUST_CLEAN]
   Start an election and cast some votes

   VOTES_TO_CAST  The number of votes to cast
   CHEAT may be:
            1     Change ballot before voter leaves polling place
            2     Change ballot after voter leaves polling place
   JUST_CLEAN = 1 Delete old election data and quit

post-election.sh [JUST_CLEAN]
   Run post-election tabulation

   JUST_CLEAN = 1 delete old election data and quit

post-election-audit.sh [JUST_CLEAN]
   Run the post-election audit checks

   JUST_CLEAN = 1 delete old audit data and quit

vote.sh [CODEBOOK_ONLY] [CHEAT]
   Vote one ballot

   CODEBOOK_ONLY = 1 just generate a codebook and quit
   CHEAT (see election.sh)


PARAMETERS
The scripts use a set of configuration parameters located in env.sh. 
   VHTI_ELECTION_SAMPLE_EID      election id (default = 12)
   VHTI_ELECTION_SAMPLE_PID      precinct id (default = 4)
   VHTI_ELECTION_SAMPLE_N        number of trustees (default = 3)
   VHTI_ELECTION_SAMPLE_T        trustee threshold (default = 2)
   VHTI_ELECTION_SAMPLE_NBSN     number of blank ballots (default = 25)
   VHTI_ELECTION_SAMPLE_NBSNP    number of provisional blank ballots (default = 0)
   VHTI_ELECTION_SAMPLE_VCBITS   verification code bit length (default = 16)


DIRECTORIES
Each directory contains scripts that call VHTi and some perl support functions.

   _sample_data            Election data output from the election_sample.
                           Follows the directory structure described below.

   audit                   Audit scripts.
      /precinct_EID-PID    Precinct audit data.

   dre                     DRE scripts private data.
      /ballotbox_EID-PID   Contains the ballots.
                           NOTE: *svb.xml is the signed, voted ballot.
                           *ctb.xml is the cleartext ballot which is retained 
                           here ONLY for illustration purposes. In actual use, 
                           *svb.xml is the retained signed, encrypted ballot 
                           and is the ONLY remnant of voter intent.

   leo                     LEO scripts and private data.
      /ballots             Contains the raw blank ballot skeleton used during
                           election configuration.

   observer_voter          Voter/observer scripts
      /precinct_EID-PID    The data output by the DRE
                           NOTE: *vr.xml is the vote receipt, *vrs.xml 
                           is the signed vote receipt, and *cb.xml 
                           is the codebook.

   transcript              This and subdirectories contain all public audit data.
      /config              Election configuration data.
      /precinct_EID-PID    Data for precinct EID, PID.
         /ballotbox        Precinct ballots.
         /config           Precinct configuration data.
         /tabulation       Precinct tabulation data.

   trustee                 Trustee scripts.
   trustee_x               Trustee_x private data.

CAVEATS
1. The "cheating modes" implemented in election.sh are for illustration 
   and not comprehensive.
2. This script requires CYGWIN Bash and Perl

DEFINITIONS
Authority   For this sample, the same as a Trustee
DRE         Direct Recording Electronic voting machine
LEO         Local Election Official
Trustees    A set of overseers that protect voter privacy as a group. 
            Typically, Trustees will be from unaligned groups to discourage
            collusion (e.g., Democrats, Republicans, American Civil Liberties 
            Union, League of Women Voters, etc.).
